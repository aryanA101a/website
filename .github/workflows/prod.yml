# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ main ]
    tags:
      - "*"
  pull_request:
    branches: [ main ]

env:
  app_name: gofr-web

jobs:
  stage_build:

    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main'}}
    strategy:
      matrix:
        node-version: [16.x]
        
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - id: tagging
      name: tagging
      run: |
        export TAG=$(date '+%Y%m%d%H%M%S')
        echo "export TAG=$(echo $TAG)"  >> variables
        echo ::set-output name=action_tag::$TAG 
        
    - name: Login to GCR
      uses: docker/login-action@v1
      with:
        registry: gcr.io
        username: _json_key
        password: ${{ secrets.GCR_KEY }}
        
    - name: building docker image
      uses: docker/build-push-action@v2
      with:
        tags: gcr.io/zs-products/gofr-web:${{ steps.tagging.outputs.action_tag }}
        context: ./
        file: ./Dockerfile
        push: true

  prod_build:

    runs-on: ubuntu-latest
    if: startsWith(github.ref,'refs/tags/v')
    strategy:
      matrix:
        node-version: [ 16.x ]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Extract Release Tag
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GCR_KEY }}

      - name: building docker image
        uses: docker/build-push-action@v2
        with:
          tags: gcr.io/zs-products/gofr-web:${{ env.RELEASE_VERSION }}
          context: ./
          file: ./Dockerfile
          push: true

  deploy_stage:
    runs-on: ubuntu-latest
    name: ðŸš€ Deploy to Stage
    needs: stage_build

    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main'}}
    steps:
      - id: tagging
        name: tagging
        run: |
          export TAG=$(date '+%Y%m%d%H%M%S')
          echo "export TAG=$(echo $TAG)"  >> variables
          echo ::set-output name=action_tag::$TAG 

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: zs-products
          service_account_key: ${{ secrets.DEPLOY_KEY }}
          export_default_credentials: true

      - name: Update Kubectl component
        run: gcloud --quiet components update kubectl

      - name: Set GCloud Project and Fetch Cluster Credentials
        run: gcloud container clusters get-credentials products-cluster --zone=us-central1 --project=zs-products

      - name: Set Deployment Image for API
        run: kubectl set image deployment/$app_name $app_name=gcr.io/zs-products/gofr-web:${{ steps.tagging.outputs.action_tag }} --namespace gofr-stage

  deploy_prod:
    runs-on: ubuntu-latest
    name: ðŸš€ Deploy to Prod
    needs: prod_build

    if: startsWith(github.ref,'refs/tags/v')
    steps:
      - name: Extract Release Tag
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: zs-products
          service_account_key: ${{ secrets.DEPLOY_KEY }}
          export_default_credentials: true

      - name: Update Kubectl component
        run: gcloud --quiet components update kubectl

      - name: Set GCloud Project and Fetch Cluster Credentials
        run: gcloud container clusters get-credentials products-cluster --zone=us-central1 --project=zs-products

      - name: Set Deployment Image for API
        run: kubectl set image deployment/$app_name $app_name=gcr.io/zs-products/gofr-web:${{ env.RELEASE_VERSION }} --namespace gofr